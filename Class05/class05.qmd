---
title: "Class 5 Data Visualization with ggplot"
author: "Job Rocha (A59023124)"
format: pdf
---

## Using ggplot

To use ggplot2 we first need to install it on our computers. To do this we will use the function `install.packages()`.

Before I use any package functions I have to load them up with a `libray()` call, like so:
```{r}
library(ggplot2)

ggplot(cars)
```
```{r}
head(cars)
```
There is always the "base R" graphics system, i.e. `plot()`
```{r}
plot(cars)
```

To use ggplot I need to spell out at least 3 things:
- data (the stuff I want to plot as a data.frame)
- aesthetics(aes() values - how the data map to the plot)
- geoms (how I want things drawn)
```{r}
ggplot(cars) +
  aes(x=speed, y=dist)
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) + 
  geom_point() 
```


```{r}
ggplot(cars) +
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth()
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth(method="lm", se=FALSE)
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth(method="lm", se=FALSE) + 
  labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       subtitle = "Your informative subtitle text here",
       caption="Dataset: 'cars'") + 
  theme_bw()
```


** Questions **

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer? 
```{r}
# Result = 5196
nrow(genes)
```

Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?
```{r}
colnames(genes)

# Result = 4
ncol(genes)
```

Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?
```{r}
# Result = 127
table(genes$State)
```

Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset? 
```{r}
# Result = 0.0244
sum(genes$State == "up") / nrow(genes)
```

Q. Complete the code below to produce the following plot
ggplot(___) + 
    aes(x=Condition1, y=___) _
    _____
```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2) +
    geom_point()
```

```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
```

```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

Q. Nice, now add some plot annotations to the p object with the labs() function so your plot looks like the following:
```{r}
p + scale_colour_manual( values=c("blue","gray","red") ) +
  labs(title="Gene Expression Changes Upon Drug Treatment",
       x="Control",
       y="Treatment")
```

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

```{r}
# install.packages("dplyr")  ## un-comment to install if needed
library(dplyr)
gapminder_2007 <- gapminder %>% filter(year==2007)
```

Let’s consider the gapminder_2007 dataset which contains the variables GDP per capita gdpPercap and life expectancy lifeExp for 142 countries in the year 2007

Q. Complete the code below to produce a first basic scater plot of this gapminder_2007 dataset:
ggplot(gapminder_2007) +
  aes(x=___, y=___) +
  ___
```{r}
ggplot(gapminder_2007, aes(x=gdpPercap, y=lifeExp)) +
  geom_point()
```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
```

Q. Can you adapt the code you have learned thus far to reproduce our gapminder scatter plot for the year 1957? What do you notice about this plot is it easy to compare with the one for 2007?

Steps to produce your 1957 plot should include:

Use dplyr to filter the gapmider dataset to include only the year 1957 (check above for how we did this for 2007).
Save your result as gapminder_1957.
Use the ggplot() function and specify the gapminder_1957 dataset as input
Add a geom_point() layer to the plot and create a scatter plot showing the GDP per capita gdpPercap on the x-axis and the life expectancy lifeExp on the y-axis
Use the color aesthetic to indicate each continent by a different color
Use the size aesthetic to adjust the point size by the population pop
Use scale_size_area() so that the point sizes reflect the actual population differences and set the max_size of each point to 15 -Set the opacity/transparency of each point to 70% using the alpha=0.7 parameter
```{r}
ggplot(gapminder_1957, aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) + 
  geom_point(alpha=0.7) +
  scale_size_area(max_size = 15)
```

Q. Do the same steps above but include 1957 and 2007 in your input dataset for ggplot(). You should now include the layer facet_wrap(~year) to produce the following plot:
```{r}
gapminder_2007_1957 <- rbind(gapminder_2007, gapminder_1957)
ggplot(gapminder_2007_1957, aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) + 
  geom_point(alpha=0.7) +
  scale_size_area(max_size = 15) +
  facet_wrap(~year)
```


