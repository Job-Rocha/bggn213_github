---
title: "Homework 6"
author: "Job Rocha PID A59023124"
format: pdf
---


Section 1: Improving analysis code by writing functions
A. Improve this regular R code by abstracting the main activities in your own new function. Note, we will go through this example together in the formal lecture. The main steps should entail running through the code to see if it works, simplifying to a core working code snippet, reducing any calculation duplication, and finally transferring your new streamlined code into a more useful function for you.

```{r}
# (A. Can you improve this analysis code?
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)
df$a <- (df$a - min(df$a)) / (max(df$a) - min(df$a))
df$b <- (df$b - min(df$a)) / (max(df$b) - min(df$b))
df$c <- (df$c - min(df$c)) / (max(df$c) - min(df$c))
df$d <- (df$d - min(df$d)) / (max(df$a) - min(df$d))
```

Improved code

```{r}
calculate.numerator <- function(x, y){ return (x - min(y)) }
calculate.denominator <- function(x, y){ return (max(x) - min(y)) }

analysis.function <- function(DF, cols){
  # Takes a dataframe (DF) and a vector of 4 columns (cols)
  # Returns a vector of doubles
  return (calculate.numerator(DF[,cols[1]], DF[, cols[2]]) / calculate.denominator(DF[, cols[3]], DF[, cols[4]]))
}

improved.function <- function(DF, columns){
  # Takes a dataframe DF and a list (columns) of vectors where each vector has 4 column names
  # Returns a datafrmae with columns's keys as columns.
  return (as.data.frame(lapply(columns,FUN=function(cols){analysis.function(DF, cols)})))
}

# Create input dataframe
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)
# Select what columns to use for each analysis
analysis <- list(
                  "a"=c("a", "a", "a", "a"),
                  "b"=c("b", "a", "b", "b"),
                  "c"=c("c", "c", "c", "c"),
                  "d"=c("d", "d", "a", "d")
                  )

#Run analysis
improved.function(df, analysis)


```

B. Next improve the below example code for the analysis of protein drug interactions by abstracting the main activities in your own new function. Then answer questions 1 to 6 below. It is recommended that you start a new Project in RStudio in a new directory and then install the bio3d package noted in the R code below (N.B. you can use the command install.packages("bio3d") or the RStudio interface to do this).
```{r}
#install.packages("bio3d")
```

Then run through the code to see if it works, fix any copy/paste errors before simplifying to a core working code snippet, reducing any calculation duplication, and finally transferring it into a more useful function for you.
```{r}
# Can you improve this analysis code?
library(bio3d)
s1 <- read.pdb("4AKE")  # kinase with drug
s2 <- read.pdb("1AKE")  # kinase no drug
s3 <- read.pdb("1E4Y")  # kinase with drug
s1.chainA <- trim.pdb(s1, chain="A", elety="CA")
s2.chainA <- trim.pdb(s2, chain="A", elety="CA")
s3.chainA <- trim.pdb(s1, chain="A", elety="CA")
s1.b <- s1.chainA$atom$b
s2.b <- s2.chainA$atom$b
s3.b <- s3.chainA$atom$b
plotb3(s1.b, sse=s1.chainA, typ="l", ylab="Bfactor")
plotb3(s2.b, sse=s2.chainA, typ="l", ylab="Bfactor")
plotb3(s3.b, sse=s3.chainA, typ="l", ylab="Bfactor")
```
Q1. What type of object is returned from the read.pdb() function? **A list**
```{r}
str(s1)
```
Q2. What does the trim.pdb() function do? **Produce a new smaller PDB object, containing a subset of atoms, from a given larger PDB object.**
```{r}
?trim.pdb
```

Q3. What input parameter would turn off the marginal black and grey rectangles in the plots and what do they represent in this case? **Parameter 'sse'. The black and grey rectangles represent secondary structures, alpha helix and b-sheet.**
```{r}
?plotb3
plotb3(s3.b, sse=NULL, typ="l", ylab="Bfactor")
```

Q4. What would be a better plot to compare across the different proteins? **Probably some kind of tree/dendogram where we can see how similar are the proteins to each other based on the hierarchy of the branches**

Q5. Which proteins are more similar to each other in their B-factor trends. How could you quantify this? HINT: try the rbind(), dist() and hclust() functions together with a resulting dendrogram plot. Look up the documentation to see what each of these functions does.

**Answer**
Which proteins are more similar to each other in their B-factor trends?.
*Proteins s1.b and s3.b are more similar to each other, as they have a low dissimilarity value as show by the dendogram below.*

How could you quantify this?
*Using a dissimilarity/distance metric using the dist() function.*

Look up the documentation to see what each of these functions does:  
- rbind: Combines multiple vectors by rows. Make each vector a row in a 2D-shaped array (matrix, data.frame, etc).  
- dist: Computes a distance metric between each row of a dataframe.  
- hclust: Computes a hierarchical cluster analysis on a set of dissimilarities.  
```{r}
hc <- hclust( dist( rbind(s1.b, s2.b, s3.b) ) )
plot(hc)
```

Q6. How would you generalize the original code above to work with any set of input
protein structures?
```{r}
library(bio3d)

plot.3d.chain.from.id <- function(id, chain = "A", elety = "CA", type = "l", ylab = "Bfactor"){
  ################# Documentation #####################
  # This function takes an pdb ID, selects specified protein chain, extracts chain's atoms and plots a standard scatter plot with secondary structure in the marginal regions.
  
  ### Usage ###
  # plot.3d.chain.from.id("4AKE", chain="A", elety="CA", type="l", ylab="Bfactor")
  
  ### Inputs ###
  # id: String. Indicates the id of the protein
  # chain: Single character. Selects protein chain to use. Default: 'A'
  # elety: A character vector of atom names. Default: 'CA'
  # type: One-character string giving the type of plot desired. Default: 'l' (lines)
  # ylab: A label for the y axis. Default: 'Bfactor'
  
  ### Output ###
  #A standard scatter plot with secondary structure in the marginal regions.
  
  #Read pdb file based on input id
  S <- read.pdb(id)
  
  #Subsets pdb file to include only specified chain.
  S.chain <- trim.pdb(S, chain = chain, elety = elety)
  
  #Extract atoms from chain
  S.atoms <- S.chain$atom$b
  
  #Plot
  return( plotb3(S.atoms, sse = S.chain, typ = type, ylab = ylab) )
}

#TEST
ID <- "4AKE"
plot.3d.chain.from.id(ID)

#MULTI TEST
IDs <- c("4AKE", "1AKE", "1E4Y")
sapply(IDs, plot.3d.chain.from.id)

```
